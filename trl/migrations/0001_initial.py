# Generated by Django 4.1.3 on 2023-03-17 13:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('guid', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('full_name', models.CharField(default='Anonymous', max_length=80)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('trl', 'Technology Readiness'), ('mrl', 'Manufacturing Readiness'), ('prl', 'Programmatic Readiness')], max_length=23, unique=True)),
                ('icon', models.ImageField(upload_to='')),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('number', models.IntegerField(default=0, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('title', models.CharField(max_length=128)),
                ('description', models.CharField(default='', max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('manager', models.CharField(blank=True, max_length=128)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified_date', models.DateTimeField(auto_now_add=True)),
                ('sophia_numbers', models.CharField(blank=True, max_length=128, null=True, validators=[django.core.validators.RegexValidator('([0-9]{4}-[0-9]{3})(, [0-9]{4}-[0-9]{3})*')])),
                ('categories', models.ManyToManyField(to='trl.category')),
                ('level', models.ForeignKey(default=0, on_delete=django.db.models.deletion.PROTECT, to='trl.level')),
            ],
            options={
                'verbose_name_plural': 'Projects',
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technology', models.CharField(choices=[('software', 'Software'), ('hardware', 'Hardware'), ('both', 'Both')], max_length=8, unique=True)),
                ('icon', models.ImageField(upload_to='')),
            ],
            options={
                'verbose_name_plural': 'Technologies',
            },
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=128, unique=True)),
                ('explanation', models.CharField(blank=True, max_length=1024, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trl.category')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trl.level')),
                ('technology', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trl.technology')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectRequirementCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('comment', models.CharField(blank=True, default='', max_length=1024)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trl.project')),
                ('requirement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trl.requirement')),
            ],
            options={
                'verbose_name_plural': 'Project requirement completions',
            },
        ),
        migrations.CreateModel(
            name='ProjectLevelCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('completion_date', models.DateTimeField(null=True)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trl.level')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trl.project')),
            ],
            options={
                'verbose_name_plural': 'Project level completions',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='level_completions',
            field=models.ManyToManyField(related_name='+', through='trl.ProjectLevelCompletion', to='trl.level'),
        ),
        migrations.AddField(
            model_name='project',
            name='level_semi',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='trl.level'),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='requirements',
            field=models.ManyToManyField(through='trl.ProjectRequirementCompletion', to='trl.requirement'),
        ),
        migrations.AddField(
            model_name='project',
            name='technology',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trl.technology'),
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('name', 'owner')},
        ),
    ]
